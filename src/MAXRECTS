import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;

public class MaxRects {

	
	public MaxRects ()
	{
		
	}	
	
	public static void MaxRectsRun(Volume container, Volume[] volumes)
	{
		List<Volume> dispo = new LinkedList<Volume>();
		dispo.add(container);
		for(Volume v:volumes)
		{
			if(dispo.size()==0)
			{
				System.out.println("Plus de place. ArrÃªt.");
				return;
			}
			
			dispo = new LinkedList<Volume>(Arrays.asList(Volume.Tri_dimension(dispo.toArray(new Volume[dispo.size()]), "xyz", "000")));
			
			boolean rentre = false;
			rentre = v.rentre_dans(dispo.get(0), "lhp");
			if(rentre) 
			{
				Volume container_choisi = dispo.get(0).clone();
				v.setX((int) container_choisi.getX());
				v.setY((int) container_choisi.getY());
				v.setZ((int) container_choisi.getZ());
				Volume[] new_libres = Volume.Decouper_Volume_libre(container_choisi, v);
				dispo.remove(0);
				for(Volume v2:new_libres)
					dispo.add(v2.clone());
				
//				for(Volume v3:dispo)
//				{
//					System.out.println(v3.toString());
//					
//				}
//				System.out.println("");
//				for(Volume v2:new_libres)
//				{
//					for(Volume v3:dispo)
//					{
//						if(v)
//						
//					}
//					
//				}
				
			}
			else
			{
				System.out.println("Impossible de rentrer le volume : " + v.toString());
			}
		}
			
	
	}
}
